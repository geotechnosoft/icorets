from odoo import models, fields, api, _


class UnicommerceOrders(models.Model):
    _name = 'unicommerce.orders'
    _description = 'Unicommerce Orders'
    _rec_name = "code"

    name = fields.Many2one("sale.order", string='Sale Order No')
    status = fields.Char(string='Status')
    order_line = fields.One2many('unicommerce.order.line', 'order_id', string='Order Line')
    order_state = fields.Selection([('draft', 'Draft'), ('done', 'Done'), ('exception', 'Exception'),
                                    ('return', 'Return Initiated')],
                                   string='Order State', default='draft')
    order_data_json = fields.Text("Order data Json", readonly=True)
    sales_channel_id = fields.Many2one('shop.sales.channel', string='Sales Channel')
    shop_instance_id = fields.Many2one('shop.instance', string='Shop Instance')
    is_return = fields.Boolean(string="Is Return")
    return_state = fields.Selection([('draft', 'Draft'), ('done', 'Done'), ('exception', 'Exception')],
                                    string='Return State')

    # api fields
    shipping_date = fields.Datetime(string="Shipping Date")
    invoice_date = fields.Datetime(string="Invoice Date")
    invoice_no = fields.Char(string='Invoice Number')
    return_invoice_no = fields.Char(string='Return Invoice Number')
    code = fields.Char(string="Code")
    displayOrderCode = fields.Char(string="Order Code")
    channel = fields.Char(string="Channel")
    source = fields.Char(string="Source")
    displayOrderDateTime = fields.Datetime(string="Order Date")
    created = fields.Datetime(string="Created")
    updated = fields.Datetime(string="Updated")
    fulfillmentTat = fields.Datetime(string="Fulfillment TAT")
    notificationEmail = fields.Char(string="Notification Email")
    notificationMobile = fields.Char(string="Notification Mobile")
    customerGSTIN = fields.Char(string="Customer GSTIN")
    channelProcessingTime = fields.Datetime(string="Channel Processing Time")
    cod = fields.Boolean(string="COD")
    thirdPartyShipping = fields.Boolean(string="Third Party Shipping")
    priority = fields.Integer(string="Priority")
    currencyCode = fields.Char(string="Currency Code")
    customerCode = fields.Char(string="Customer Code")

    billing_name = fields.Char(string="Billing Name")
    billing_addressLine1 = fields.Char(string="Billing Address Line 1")
    billing_addressLine2 = fields.Char(string="Billing Address Line 2")
    billing_city = fields.Char(string="Billing City")
    billing_district = fields.Char(string="Billing District")
    billing_state = fields.Char(string="Billing State")
    billing_country = fields.Char(string="Billing Country")
    billing_pincode = fields.Char(string="Billing Pincode")
    billing_phone = fields.Char(string="Billing Phone")
    billing_email = fields.Char(string="Billing Email")

    shipping_name = fields.Char(string="Shipping Name")
    shipping_addressLine1 = fields.Char(string="Shipping Address Line 1")
    shipping_addressLine2 = fields.Char(string="Shipping Address Line 2")
    shipping_city = fields.Char(string="Shipping City")
    shipping_district = fields.Char(string="Shipping District")
    shipping_state = fields.Char(string="Shipping State")
    shipping_country = fields.Char(string="Shipping Country")
    shipping_pincode = fields.Char(string="Shipping Pincode")
    shipping_phone = fields.Char(string="Shipping Phone")
    shipping_email = fields.Char(string="Shipping Email")

    @api.model_create_multi
    def create(self, vals_list):
        res = super(UnicommerceOrders, self).create(vals_list)
        return res


class UnicommerceOrderLine(models.Model):
    _name = 'unicommerce.order.line'
    _description = 'unicommerce Order Line'

    order_id = fields.Many2one('unicommerce.orders', string='Order')
    product_id = fields.Many2one('product.product', string='Product')
    shipping_package_code = fields.Char(string="Shipping Package Code")
    shipping_package_status = fields.Char(string="Shipping Package Status")
    facility_code = fields.Char(string="Facility Code")
    facility_name = fields.Char(string="Facility Name")
    alternate_facility_code = fields.Char(string="Alternate Facility Code")
    reverse_pickup_code = fields.Char(string="Reverse Pickup Code")
    shipping_address_id = fields.Integer(string="Shipping Address ID")
    packet_number = fields.Integer(string="Packet Number")
    combination_identifier = fields.Char(string="Combination Identifier")
    combination_description = fields.Char(string="Combination Description")
    type = fields.Char(string="Type")
    item = fields.Char(string="Item")
    shipping_method_code = fields.Char(string="Shipping Method Code")
    item_name = fields.Char(string="Item Name")
    item_sku = fields.Char(string="Item SKU")
    seller_sku_code = fields.Char(string="Seller SKU Code")
    channel_product_id = fields.Char(string="Channel Product ID")
    image_url = fields.Char(string="Image URL")
    status_code = fields.Char(string="Status Code")
    code = fields.Char(string="Code")
    shelf_code = fields.Char(string="Shelf Code")
    total_price = fields.Float(string="Total Price")
    selling_price = fields.Float(string="Selling Price")
    shipping_charges = fields.Float(string="Shipping Charges")
    shipping_method_charges = fields.Float(string="Shipping Method Charges")
    cash_on_delivery_charges = fields.Float(string="Cash on Delivery Charges")
    prepaid_amount = fields.Float(string="Prepaid Amount")
    voucher_code = fields.Char(string="Voucher Code")
    voucher_value = fields.Float(string="Voucher Value")
    store_credit = fields.Float(string="Store Credit")
    discount = fields.Float(string="Discount")
    gift_wrap = fields.Char(string="Gift Wrap")
    gift_wrap_charges = fields.Float(string="Gift Wrap Charges")
    tax_percentage = fields.Float(string="Tax Percentage")
    gift_message = fields.Char(string="Gift Message")
    cancellable = fields.Boolean(string="Cancellable")
    edit_address = fields.Boolean(string="Edit Address")
    reverse_pickable = fields.Boolean(string="Reverse Pickable")
    packet_configurable = fields.Boolean(string="Packet Configurable")
    created = fields.Float(string="Created")
    updated = fields.Float(string="Updated")
    on_hold = fields.Boolean(string="On Hold")
    sale_order_item_alternate_id = fields.Char(string="Sale Order Item Alternate ID")
    cancellation_reason = fields.Char(string="Cancellation Reason")
    cancelled_by_seller = fields.Char(string="Cancelled by Seller")
    page_url = fields.Char(string="Page URL")
    color = fields.Char(string="Color")
    brand = fields.Char(string="Brand")
    size = fields.Char(string="Size")
    replacement_sale_order_code = fields.Char(string="Replacement Sale Order Code")
    bundle_sku_code = fields.Char(string="Bundle SKU Code")
    custom_field_values = fields.Char(string="Custom Field Values")
    item_detail_field_dto_list = fields.Char(string="Item Detail Field DTO List")
    hsn_code = fields.Char(string="HSN Code")
    total_integrated_gst = fields.Float(string="Total Integrated GST")
    integrated_gst_percentage = fields.Float(string="Integrated GST Percentage")
    total_union_territory_gst = fields.Float(string="Total Union Territory GST")
    union_territory_gst_percentage = fields.Float(string="Union Territory GST Percentage")
    total_state_gst = fields.Float(string="Total State GST")
    state_gst_percentage = fields.Float(string="State GST Percentage")
    total_central_gst = fields.Float(string="Total Central GST")
    central_gst_percentage = fields.Float(string="Central GST Percentage")
    max_retail_price = fields.Float(string="Max Retail Price")
    selling_price_without_taxes_and_discount = fields.Float(string="Selling Price Without Taxes and Discount")
    batch_dto = fields.Char(string="Batch DTO")
    shipping_charge_tax_percentage = fields.Integer(string="Shipping Charge Tax Percentage")
    tcs = fields.Float(string="TCS")
    uc_batch_code = fields.Char(string="UC Batch Code")
    channel_mrp = fields.Char(string="Channel MRP")
    channel_expiry_date = fields.Char(string="Channel Expiry Date")
    channel_vendor_batch_number = fields.Char(string="Channel Vendor Batch Number")
    channel_mfd = fields.Char(string="Channel MFD")
    country_of_origin = fields.Char(string="Country of Origin")
    expected_delivery_date = fields.Char(string="Expected Delivery Date")
    item_detail_fields = fields.Char(string="Item Detail Fields")
    item_details_key = fields.Char(string="Item Details Key")
    channel_sale_order_item_code = fields.Char(string="Channel Sale Order Item Code")
    effective_tolerance = fields.Char(string="Effective Tolerance")
    shipping_label_link = fields.Char(string="Shipping Label Link")
    irn = fields.Char(string="IRN")
    additional_info = fields.Char(string="Additional Info")
    tax_id = fields.Many2one('account.tax', string='Tax')
    status = fields.Boolean(string="Exception")
    return_status = fields.Boolean(string="Return Initiated")
    is_returned = fields.Boolean(string="Is Returned")

# class UnicommerceShippingPackages(models.Model):
#     _name = 'unicommerce.shipping.packages'
#     _description = 'Unicommerce Shipping Packages'
